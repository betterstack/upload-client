{"version":3,"file":"task.js","sourceRoot":"","sources":["../../src/task.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAC,YAAY,EAAC,MAAM,UAAU,CAAC;AAEtC,MAAM,OAAO,aAAa;IASxB,YAAY,IAA4B;QAJhC,UAAK,GAAY,KAAK,CAAC;QACvB,aAAQ,GAAY,KAAK,CAAC;QAW3B,UAAK,GAAG,GAAoC,EAAE;YACnD,IAAI;gBAEF,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;gBAExC,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAGrB,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;gBACzC,MAAM,QAAQ,GAAmB;oBAC/B,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;oBACtD,WAAW,EAAE,CAAC;oBACd,aAAa,EAAE,CAAC;oBAChB,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oBACzC,gBAAgB,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACpC,kBAAkB,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACvC,CAAC;gBACF,IAAI,CAAC,QAAQ,iCACR,QAAQ,KACX,UAAU,EAAE,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,EACpC,gBAAgB,EAAE,CAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,EAChD,kBAAkB,EAAE,CAAC,GAAG,QAAQ,CAAC,kBAAkB,CAAC,IACpD,CAAC;gBAEH,IAAI,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;gBAC1C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;oBAC5C,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM;oBACxB,UAAU,EAAE,UAAU;oBACtB,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;wBACvB,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI;wBACzB,GAAG,EAAE,CAAC,CAAC,GAAG;wBACV,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI;qBAClB,CAAC,CAAC;iBACJ,CAAC,CAAC;gBACH,IAAI,YAAY,CAAC,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;oBAC9C,MAAM,IAAI,YAAY,CAAC,uCAAuC,CAAC,CAAC;iBACjE;gBAED,IAAI,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;gBACvC,MAAM,aAAa,GAAqB,EAAE,CAAC;gBAE3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAErC,IAAI,IAAI,CAAC,KAAK,EAAE;wBAAE,MAAM;qBAAE;oBAE1B,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBAC3B,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;oBACtC,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;oBACtC,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAE5C,aAAa,CAAC,CAAC,CAAC,GAAG;wBACjB,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,IAAI;wBACV,OAAO,EAAE,KAAK;wBACd,YAAY,EAAE,CAAC;wBACf,KAAK,EAAE,EAAE;qBACV,CAAC;oBAEF,IAAI;wBACF,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;wBACjD,MAAM,IAAI,CAAC,SAAS,CAAC;4BACnB,GAAG,EAAE,GAAG,EAAE,IAAI;4BACd,gBAAgB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;gCAE/B,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gCAErC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;gCAExE,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;gCAE5E,QAAQ,CAAC,aAAa,GAAG,CAAC,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;gCAE5E,IAAI,IAAI,CAAC,KAAK,EAAE;oCACd,GAAG,CAAC,KAAK,EAAE,CAAC;iCACb;qCACI;oCACH,IAAI,CAAC,QAAQ,iCACR,QAAQ,KACX,UAAU,EAAE,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,EACpC,gBAAgB,EAAE,CAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,EAChD,kBAAkB,EAAE,CAAC,GAAG,QAAQ,CAAC,kBAAkB,CAAC,IACpD,CAAC;iCACJ;4BAEH,CAAC;yBACF,CAAC,CAAC;wBACH,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;wBAChC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,GAAG,CAAC;qBACrC;oBACD,OAAO,CAAC,EAAE;wBACR,IAAI,IAAI,CAAC,KAAK,EAAE;4BACd,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;4BACnC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;yBACzD;6BACI,IAAI,CAAC,CAAC,MAAM,EAAE;4BACjB,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,gBAAgB,CAAC;4BAC1C,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC;yBAC1C;6BACI;4BACH,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,4BAA4B,CAAC;4BACtD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAChB;qBACF;iBAEF;gBAED,OAAO,aAAa,CAAC;aAEtB;YACD,OAAO,CAAC,EAAE;gBACR,IAAI,CAAC,YAAY,YAAY,EAAE;oBAC7B,MAAM,CAAC,CAAC;iBACT;gBACD,MAAM,IAAI,YAAY,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;aAC7C;QACH,CAAC,CAAA,CAAA;QAEM,SAAI,GAAG,GAAG,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC,CAAA;QAEM,eAAU,GAAG,CAAC,EAAsB,EAAE,EAAE;YAC7C,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACrB,CAAC,CAAA;QAEO,UAAK,GAAG,GAAG,EAAE;YAEnB,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;YAEhD,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,MAAM,IAAI,YAAY,CAAC,uBAAuB,CAAC,CAAC;aACjD;YAED,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,MAAM,IAAI,YAAY,CAAC,sBAAsB,CAAC,CAAC;aAChD;YAED,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,IAAI,YAAY,CAAC,iBAAiB,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,YAAY,CAAC,qBAAqB,CAAC,CAAC;aAC/C;YAED,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjD,MAAM,IAAI,YAAY,CAAC,eAAe,CAAC,CAAC;aACzC;QAEH,CAAC,CAAA;QAEO,kBAAa,GAAG,CAAO,IAA2B,EAAkC,EAAE;YAE5F,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;gBACxC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,UAAU;gBACjB,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC3B,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAE3C,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC3B,MAAM,IAAI,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC3C;YAED,OAAO,YAAY,CAAC;QAEtB,CAAC,CAAA,CAAA;QAEO,cAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,gBAAgB,EAAqB,EAA2B,EAAE;YACvG,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAErC,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;gBAEjC,GAAG,CAAC,kBAAkB,GAAG,GAAG,EAAE;oBAC5B,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,EAAE;wBACxB,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;4BACtB,OAAO,CAAC,GAAG,CAAC,CAAC;yBACd;6BACI;4BACH,MAAM,CAAC,GAAG,CAAC,CAAC;yBACb;qBACF;gBACH,CAAC,CAAC;gBAEF,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE;oBAC5B,IAAI,CAAC,CAAC,gBAAgB,EAAE;wBACtB,gBAAgB,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;qBACjC;gBACH,CAAC,CAAC;gBAEF,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBACrB,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,GAAG,EAAE;oBACP,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;iBACxC;gBACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,QAAG,GAAG,CAAC,GAAG,CAAM,EAAE,EAAE;YAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACjB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACnB;QACH,CAAC,CAAA;QA1NC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,sCAAsC,CAAC,CAAC;YACxC,mDAAmD,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;IAC3B,CAAC;CAuNF","sourcesContent":["import * as T from \"./types\";\nimport {ServiceError} from \"./errors\";\n\nexport class UploadBtnTask {\n\n  private readonly opts: T.UploadBtnTaskOptions;\n  private readonly apiUrl: string;\n\n  private abort: boolean = false;\n  private executed: boolean = false;\n  private progress: T.ProgressCallback;\n\n  constructor(opts: T.UploadBtnTaskOptions) {\n    this.opts = opts;\n    this.apiUrl = opts.isTest ?\n      \"http://localhost:3002/v1/signed-urls\" :\n      \"https://upload-api.betterstack.dev/v1/signed-urls\";\n    this.progress = () => {};\n  }\n\n  public start = async (): Promise<T.UploadedFile[]> => {\n    try {\n\n      const { files, providerId } = this.opts;\n\n      this.log(\"UploadClient: Init Task\");\n      this.check();\n      this.executed = true;\n\n      // Construct progress\n      this.log(\"UploadClient: Start progress\");\n      const progress: T.TaskProgress = {\n        totalBytes: files.reduce((a, f) => a + f.file.size, 0),\n        loadedBytes: 0,\n        loadedPercent: 0,\n        filesBytes: files.map((f) => f.file.size),\n        filesLoadedBytes: files.map(() => 0),\n        filesLoadedPercent: files.map(() => 0),\n      };\n      this.progress({\n        ...progress,\n        filesBytes: [...progress.filesBytes],\n        filesLoadedBytes: [...progress.filesLoadedBytes],\n        filesLoadedPercent: [...progress.filesLoadedPercent],\n      });\n\n      this.log(\"UploadClient: Get signed URLS\");\n      const signResponse = await this.getSignedUrls({\n        apiKey: this.opts.apiKey,\n        providerId: providerId,\n        files: files.map((f) => ({\n          key: f.key || f.file.name,\n          acl: f.acl,\n          type: f.file.type,\n        })),\n      });\n      if (signResponse.files.length !== files.length) {\n        throw new ServiceError(\"mismatch_length_signed_urls_and_files\");\n      }\n\n      this.log(\"UploadClient: Upload files\");\n      const uploadedFiles: T.UploadedFile[] = [];\n\n      for (let i = 0; i < files.length; i++) {\n\n        if (this.abort) { break; }\n\n        const file = files[i].file;\n        const key = signResponse.files[i].key;\n        const acl = signResponse.files[i].acl;\n        const url = signResponse.files[i].signedUrl;\n\n        uploadedFiles[i] = {\n          key: key,\n          file: file,\n          success: false,\n          responseCode: 0,\n          error: \"\",\n        };\n\n        try {\n          this.log(\"UploadClient: Upload file\", url, file);\n          await this.putObject({\n            url, acl, file,\n            progressCallback: (bytes, xhr) => {\n\n              progress.filesLoadedBytes[i] = bytes;\n\n              progress.filesLoadedPercent[i] = (bytes / progress.filesBytes[i]) * 100;\n\n              progress.loadedBytes = progress.filesLoadedBytes.reduce((a, v) => a + v, 0);\n\n              progress.loadedPercent = (progress.loadedBytes / progress.totalBytes) * 100;\n\n              if (this.abort) {\n                xhr.abort();\n              }\n              else {\n                this.progress({\n                  ...progress,\n                  filesBytes: [...progress.filesBytes],\n                  filesLoadedBytes: [...progress.filesLoadedBytes],\n                  filesLoadedPercent: [...progress.filesLoadedPercent],\n                });\n              }\n\n            },\n          });\n          uploadedFiles[i].success = true;\n          uploadedFiles[i].responseCode = 200;\n        }\n        catch (e) {\n          if (this.abort) {\n            uploadedFiles[i].error = \"aborted\";\n            uploadedFiles[i].responseCode = e.status ? e.status : 0;\n          }\n          else if (e.status) {\n            uploadedFiles[i].error = `failed_request`;\n            uploadedFiles[i].responseCode = e.status;\n          }\n          else {\n            uploadedFiles[i].error = `could_not_initiate_request`;\n            console.log(e);\n          }\n        }\n\n      }\n\n      return uploadedFiles;\n\n    }\n    catch (e) {\n      if (e instanceof ServiceError) {\n        throw e;\n      }\n      throw new ServiceError(\"internal_error\", e);\n    }\n  }\n\n  public stop = () => {\n    this.abort = true;\n  }\n\n  public onProgress = (fn: T.ProgressCallback) => {\n    this.progress = fn;\n  }\n\n  private check = () => {\n\n    const { apiKey, providerId, files } = this.opts;\n\n    if (this.executed) {\n      throw new ServiceError(\"task_already_executed\");\n    }\n\n    if (this.abort) {\n      throw new ServiceError(\"task_already_aborted\");\n    }\n\n    if (!apiKey) {\n      throw new ServiceError(\"missing_api_key\");\n    }\n\n    if (!providerId) {\n      throw new ServiceError(\"missing_provider_id\");\n    }\n\n    if (!files || !files.length || files.length === 0) {\n      throw new ServiceError(\"task_no_files\");\n    }\n\n  }\n\n  private getSignedUrls = async (data: T.APIGetSignedUrlsReq): Promise<T.APIGetSignedUrlsRes> => {\n\n    const response = await fetch(this.apiUrl, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    const responseData = await response.json();\n\n    if (response.status !== 200) {\n      throw new ServiceError(responseData.code);\n    }\n\n    return responseData;\n\n  }\n\n  private putObject = ({ url, file, acl, progressCallback }: T.APIPutObjectReq): Promise<XMLHttpRequest> => {\n    return new Promise((resolve, reject) => {\n\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr);\n          }\n          else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.upload.onprogress = (e) => {\n        if (e.lengthComputable) {\n          progressCallback(e.loaded, xhr);\n        }\n      };\n\n      xhr.open(\"PUT\", url);\n      xhr.setRequestHeader(\"Content-Type\", file.type);\n      if (acl) {\n        xhr.setRequestHeader(\"x-amz-acl\", acl);\n      }\n      xhr.send(file);\n\n    });\n  }\n\n  private log = (...d: any) => {\n    if (this.opts.log) {\n      console.log(...d);\n    }\n  }\n\n}"]}