{"version":3,"file":"index.js","sources":["../../src/errors.ts","../../src/task.ts","../../src/index.ts"],"sourcesContent":["\nexport const errors = {\n  // Client errors\n  missing_api_key: \"You must set an API key before uploading files\",\n  missing_provider_id: \"You must set a 'providerId' in upload options\",\n  task_already_executed: \"An upload task may only be started once\",\n  task_already_aborted: \"Upload task already aborted, it can no longer start\",\n  task_no_files: \"Property 'files' is missing or is an empty array\",\n  mismatch_length_signed_urls_and_files: \"Something went wrong internally, contact us\",\n  internal_error: \"Something went wrong internally, contact us\",\n  // Server errors\n  invalid_api_key: \"API key doesn't match any services\",\n  invalid_provider_id: \"Provider ID doesn't match any service providers\",\n  not_enough_uploads: \"Not enough upload credits on this service\"\n};\n\nexport class ServiceError extends Error {\n  code: string;\n  thrown?: Error;\n  constructor(code: keyof typeof errors, e?: Error) {\n    super(errors[code]);\n    this.name = \"ServiceError\";\n    this.code = code;\n    this.thrown = e;\n  }\n}\n","import * as T from \"./types\";\nimport {ServiceError} from \"./errors\";\n\nexport class UploadBtnTask {\n\n  private readonly opts: T.UploadBtnTaskOptions;\n  private readonly apiUrl: string;\n\n  private abort: boolean = false;\n  private executed: boolean = false;\n  private progress: T.ProgressCallback;\n\n  constructor(opts: T.UploadBtnTaskOptions) {\n    this.opts = opts;\n    // @ts-ignore\n    this.apiUrl = opts.isTest ?\n      \"http://localhost:3002/v1/signed-urls\" :\n      \"https://upload-api.betterstack.dev/v1/signed-urls\";\n    this.progress = () => {};\n  }\n\n  public start = async (): Promise<T.UploadedFile[]> => {\n    try {\n\n      const { files, providerId } = this.opts;\n\n      this.log(\"UploadClient: Init Task\");\n      this.check();\n      this.executed = true;\n\n      // Construct progress\n      this.log(\"UploadClient: Start progress\");\n      const progress: T.TaskProgress = {\n        totalBytes: files.reduce((a, f) => a + f.file.size, 0),\n        loadedBytes: 0,\n        loadedPercent: 0,\n        filesBytes: files.map((f) => f.file.size),\n        filesLoadedBytes: files.map(() => 0),\n        filesLoadedPercent: files.map(() => 0),\n      };\n      this.progress({\n        ...progress,\n        filesBytes: [...progress.filesBytes],\n        filesLoadedBytes: [...progress.filesLoadedBytes],\n        filesLoadedPercent: [...progress.filesLoadedPercent],\n      });\n\n      this.log(\"UploadClient: Get signed URLS\");\n      const signResponse = await this.getSignedUrls({\n        apiKey: this.opts.apiKey,\n        providerId: providerId,\n        files: files.map((f) => ({\n          key: f.key || f.file.name,\n          acl: f.acl,\n          type: f.file.type,\n        })),\n      });\n      if (signResponse.files.length !== files.length) {\n        throw new ServiceError(\"mismatch_length_signed_urls_and_files\");\n      }\n\n      this.log(\"UploadClient: Upload files\");\n      const uploadedFiles: T.UploadedFile[] = [];\n\n      for (let i = 0; i < files.length; i++) {\n\n        if (this.abort) { break; }\n\n        const file = files[i].file;\n        const key = signResponse.files[i].key;\n        const acl = signResponse.files[i].acl;\n        const url = signResponse.files[i].signedUrl;\n\n        uploadedFiles[i] = {\n          key: key,\n          file: file,\n          success: false,\n          responseCode: 0,\n          error: \"\",\n        };\n\n        try {\n          this.log(\"UploadClient: Upload file\", url, file);\n          await this.putObject({\n            url, acl, file,\n            progressCallback: (bytes, xhr) => {\n\n              progress.filesLoadedBytes[i] = bytes;\n\n              progress.filesLoadedPercent[i] = (bytes / progress.filesBytes[i]) * 100;\n\n              progress.loadedBytes = progress.filesLoadedBytes.reduce((a, v) => a + v, 0);\n\n              progress.loadedPercent = (progress.loadedBytes / progress.totalBytes) * 100;\n\n              if (this.abort) {\n                xhr.abort();\n              }\n              else {\n                this.progress({\n                  ...progress,\n                  filesBytes: [...progress.filesBytes],\n                  filesLoadedBytes: [...progress.filesLoadedBytes],\n                  filesLoadedPercent: [...progress.filesLoadedPercent],\n                });\n              }\n\n            },\n          });\n          uploadedFiles[i].success = true;\n          uploadedFiles[i].responseCode = 200;\n        }\n        catch (e) {\n          if (this.abort) {\n            uploadedFiles[i].error = \"aborted\";\n            uploadedFiles[i].responseCode = e.status ? e.status : 0;\n          }\n          else if (e.status) {\n            uploadedFiles[i].error = `failed_request`;\n            uploadedFiles[i].responseCode = e.status;\n          }\n          else {\n            uploadedFiles[i].error = `could_not_initiate_request`;\n            this.log(e);\n          }\n        }\n\n      }\n\n      return uploadedFiles;\n\n    }\n    catch (e) {\n      if (e instanceof ServiceError) {\n        throw e;\n      }\n      throw new ServiceError(\"internal_error\", e);\n    }\n  }\n\n  public stop = () => {\n    this.abort = true;\n  }\n\n  public onProgress = (fn: T.ProgressCallback) => {\n    this.progress = fn;\n  }\n\n  private check = () => {\n\n    const { apiKey, providerId, files } = this.opts;\n\n    if (this.executed) {\n      throw new ServiceError(\"task_already_executed\");\n    }\n\n    if (this.abort) {\n      throw new ServiceError(\"task_already_aborted\");\n    }\n\n    if (!apiKey) {\n      throw new ServiceError(\"missing_api_key\");\n    }\n\n    if (!providerId) {\n      throw new ServiceError(\"missing_provider_id\");\n    }\n\n    if (!files || !files.length || files.length === 0) {\n      throw new ServiceError(\"task_no_files\");\n    }\n\n  }\n\n  private getSignedUrls = async (data: T.APIGetSignedUrlsReq): Promise<T.APIGetSignedUrlsRes> => {\n\n    const response = await fetch(this.apiUrl, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    const responseData = await response.json();\n\n    if (response.status !== 200) {\n      throw new ServiceError(responseData.code);\n    }\n\n    return responseData;\n\n  }\n\n  private putObject = ({ url, file, acl, progressCallback }: T.APIPutObjectReq): Promise<XMLHttpRequest> => {\n    return new Promise((resolve, reject) => {\n\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            resolve(xhr);\n          }\n          else {\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.upload.onprogress = (e) => {\n        if (e.lengthComputable) {\n          progressCallback(e.loaded, xhr);\n        }\n      };\n\n      xhr.open(\"PUT\", url);\n      xhr.setRequestHeader(\"Content-Type\", file.type);\n      if (acl) {\n        xhr.setRequestHeader(\"x-amz-acl\", acl);\n      }\n      xhr.send(file);\n\n    });\n  }\n\n  private log = (...d: any) => {\n    if (this.opts.log) {\n      console.log(...d);\n    }\n  }\n\n}","import * as T from \"./types\";\nimport { UploadBtnTask } from \"./task\";\n\nexport default class UploadClient {\n\n  private readonly opts: T.UploadClientOpts;\n\n  constructor(opts: T.UploadClientOpts) {\n    this.opts = opts;\n  }\n\n  setApiKey = (key: string) => {\n    this.opts.apiKey = key;\n  }\n\n  upload = (opts: T.UploadFunctionOpts) => {\n    return new UploadBtnTask({\n      ...this.opts,\n      ...opts,\n    });\n  }\n\n}\n"],"names":[],"mappings":"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"}